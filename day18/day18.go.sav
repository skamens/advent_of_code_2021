package main

import (
	"aoc21/aocutil"
	"fmt"
	"strconv"
)

type snail struct {
	leftnum    int
	leftsnail  *snail
	rightnum   int
	rightsnail *snail
	parent     *snail
}

func reduce(s *snail, depth int) bool {
	if s == nil {
		return false
	}

	if depth >= 4 && s.leftnum != -1 && s.rightnum != -1 {
		// Find the first regular number to the left
		for p := s.parent; p != nil; p = p.parent {
			if p.leftnum != -1 {
				p.leftnum += s.leftnum
				break
			}
		}

		p := s.parent
		// Find the first regular number ot the right
		for {
			if p.rightnum != -1 {
				p.rightnum += s.rightnum
				break
			}
		}
		for p := s.parent; p != nil; p = p.parent {
			if p.rightnum != -1 {
				p.rightnum += s.rightnum
				break
			}
		}

		// This one becomes just 0
		if s.parent.leftsnail == s {
			s.parent.leftsnail = nil
			s.parent.leftnum = 0
		} else if s.parent.rightsnail == s {
			s.parent.rightsnail = nil
			s.parent.rightnum = 0
		}
		return true
	} else if s.leftsnail != nil && reduce(s.leftsnail, depth+1) {
		return true
	} else if s.rightsnail != nil && reduce(s.rightsnail, depth+1) {
		return true
	} else {
		return false
	}
}

func printSnail(s *snail) string {
	var result string

	result = result + "["
	if s.leftnum != -1 {
		result = fmt.Sprintf("%s%d", result, s.leftnum)
	} else {
		result = fmt.Sprintf("%s%s", result, printSnail(s.leftsnail))
	}

	result += ","
	if s.rightnum != -1 {
		result = fmt.Sprintf("%s%d", result, s.rightnum)
	} else {
		result = fmt.Sprintf("%s%s", result, printSnail(s.rightsnail))
	}

	result += "]"
	return result
}

func parseSnail(in string) *snail {

	newSnail := snail{-1, nil, -1, nil, nil}

	var s string

	s = in

	var leftString, rightString string

	if s[0] == '[' {
		// Strip off the braces
		s = s[1 : len(s)-1]
	}

	// Now, see what the first character is
	if s[0] == '[' {
		// Left one is another snail. Find the pair bracket
		level := 1
		endpos := 1
		for {
			if s[endpos] == ']' {
				level--
				if level == 0 {
					break
				}
			} else if s[endpos] == '[' {
				level++
			}
			endpos++
		}

		leftString = s[0 : endpos+1]
		rightString = s[endpos+2:]
	} else {
		leftString = s[0:1]
		rightString = s[2:]
	}

	if len(leftString) > 1 {
		newSnail.leftsnail = parseSnail(leftString)
		newSnail.leftsnail.parent = &newSnail
	} else {
		newSnail.leftnum, _ = strconv.Atoi(leftString)
	}

	if len(rightString) > 1 {
		newSnail.rightsnail = parseSnail(rightString)
		newSnail.rightsnail.parent = &newSnail
	} else {
		newSnail.rightnum, _ = strconv.Atoi(rightString)
	}

	return &newSnail
}

func main() {

	input := "test18.txt"

	lines := aocutil.LoadStringArray(input)

	var theSnail *snail
	theSnail = nil

	for _, s := range lines {
		if theSnail == nil {
			// This is the first one, so we just read it
			theSnail = parseSnail(s)
			fmt.Printf("First snail: %s\n", printSnail(theSnail))

			continue
		}

		// Not the first, so we want to read the new one,
		// Add them together, and reduce

		var newSnail = snail{-1, nil, -1, nil, nil}

		newSnail.leftsnail = theSnail
		theSnail.parent = &newSnail
		newSnail.rightsnail = parseSnail(s)
		newSnail.rightsnail.parent = &newSnail

		theSnail = &newSnail

		theSnail = parseSnail("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]")

		fmt.Printf("Before reduce: %s\n", printSnail(theSnail))
		reduce(theSnail, 0)
		fmt.Printf("After reduce: %s\n", printSnail(theSnail))

	}

}
